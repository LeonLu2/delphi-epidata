name: CI
on:
  push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - run: mkdir -p repos/undefx
      - name: Checkout undefx/py3tester
        uses: actions/checkout@v2
        with:
          repository: undefx/py3tester
          path: repos/undefx/py3tester
      - name: Checkout undefx/undef-analysis
        uses: actions/checkout@v2
        with:
          repository: undefx/undef-analysis
          path: repos/undefx/undef-analysis

      - run: mkdir -p repos/delphi

      - name: Checkoutcmu-delphi/operations
        uses: actions/checkout@v2
        with:
          repository: cmu-delphi/operations
          path: repos/delphi/operations
      - name: Checkout cmu-delphi/utils
        uses: actions/checkout@v2
        with:
          repository: cmu-delphi/utils
          path: repos/delphi/utils
      - name: Checkout cmu-delphi/github-deploy-repo
        uses: actions/checkout@v2
        with:
          repository: cmu-delphi/github-deploy-repo
          path: repos/delphi/github-deploy-repo
      - name: Checkout THIS REPO
        uses: actions/checkout@v2
        with:
          path: repos/delphi/delphi-epidata
      - name: Checkout cmu-delphi/flu-contest
        uses: actions/checkout@v2
        with:
          repository: cmu-delphi/flu-contest
          path: repos/delphi/flu-contest
      - name: Checkout cmu-delphi/nowcast
        uses: actions/checkout@v2
        with:
          repository: cmu-delphi/nowcast
          path: repos/delphi/nowcast

      - name: Build docker images
        run: |
          docker build -t delphi_database -f repos/delphi/operations/dev/docker/database/Dockerfile .
          docker build -t delphi_python -f repos/delphi/operations/dev/docker/python/Dockerfile .
          docker build -t delphi_database_epidata -f ./repos/delphi/delphi-epidata/dev/docker/database/epidata/Dockerfile .
          cd ./repos/delphi/delphi-epidata
          docker build -t delphi_web_epidata -f ./devops/Dockerfile .
          cd ../../../

      - name: Start services
        run: |
          docker network create --driver bridge delphi-net
          docker run --rm -d -p 13306:3306 --network delphi-net --name delphi_database_epidata delphi_database_epidata
          docker run --rm -d -p 10080:80 --env "SQLALCHEMY_DATABASE_URI=mysql+mysqldb://user:pass@delphi_database_epidata:3306/epidata" --env "FLASK_SECRET=abc" --env "FLASK_PREFIX=/epidata" --network delphi-net --name delphi_web_epidata delphi_web_epidata
          docker ps

      - run: |
          wget https://raw.githubusercontent.com/eficode/wait-for/master/wait-for
          chmod +x wait-for
          ./wait-for localhost:13306 -- echo 'ready'
          sleep 10s
      - name: Run Unit Tests
        run: |
          docker run --rm --network delphi-net delphi_python python3 -m undefx.py3tester.py3tester --use-exit-code repos/delphi/delphi-epidata/tests

      - name: Run Integration Tests
        run: |
          docker run --rm --network delphi-net delphi_python python3 -m undefx.py3tester.py3tester --use-exit-code repos/delphi/delphi-epidata/integrations

      - name: Clean Up
        run: |
          docker stop delphi_database_epidata delphi_web_epidata
          docker network remove delphi-net

      # Deployment      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: cmu-delphi-deploy-machine
          password: ${{ secrets.CMU_DELPHI_DEPLOY_MACHINE_PAT }}

      - name: Build, tag, and push image to Github
        env:
          DEVOPS_DOCKER_FILE: ./devops/Dockerfile
        run: |
          cd repos/delphi/delphi-epidata
          baseRef="${GITHUB_REF#*/}"
          baseRef="${baseRef#*/}"
          case "${baseRef}" in
          main)
            imageTag="latest"
            ;;
          *)
            imageTag="${baseRef//\//_}" # replace `/` with `_` in branch name
            ;;
          esac
          echo "using tag: --${imageTag}--"
          docker build -t ghcr.io/${{ github.repository }}:$imageTag --file ${DEVOPS_DOCKER_FILE} .
          docker push ghcr.io/${{ github.repository }}:$imageTag

          # trigger a webhook update
          curl -H "Authorization: Bearer ${{ secrets.DELPHI_DEPLOY_WEBHOOK_TOKEN }}" \
               -X POST ${{ secrets.DELPHI_DEPLOY_WEBHOOK_URL }} \
               -H "Content-Type: application/x-www-form-urlencoded" \
               -d "repository=ghcr.io/${{ github.repository }}&tag=$imageTag"
